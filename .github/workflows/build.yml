name: Build

on:
  push:

env:
  CARGO_TERM_COLOR: always

jobs:
  check-lints:
    runs-on: ubuntu-20.04
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
      - name: Install cargo-about
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-about
          version: "=0.5.3"
          args: --locked
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/hydrogen
          cache: yarn
      - name: Enable corepack
        run: corepack enable
      - name: Install Yarn dependencies
        run: yarn install --immutable
      - name: Install apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libpython3-dev libdbus-1-dev libgtk-3-dev libsoup-gnome2.4-dev libwebkit2gtk-4.0-dev
          version: 1.0
      - name: Check Rust formatting
        working-directory: src-tauri
        run: cargo fmt --check
      - name: Check ESLint lints
        if: success() || failure()
        run: |
          yarn run lint
          (exit `git status --porcelain=v1 2>/dev/null | wc -l`)
      - name: Check Clippy lints (Debug)
        if: success() || failure()
        working-directory: src-tauri
        run: |
          mkdir -p ../dist
          cargo clippy --no-deps --locked -- --deny warnings --deny clippy::all
          rmdir ../dist
      - name: Check Clippy lints (Release)
        if: success() || failure()
        working-directory: src-tauri
        run: |
          mkdir -p ../dist
          cargo clippy --no-deps --locked --release -- --deny warnings --deny clippy::all
          rmdir ../dist
      - name: Check third-party licenses
        if: success() || failure()
        run: |
          git restore .
          ./update_dependencies.sh
          (exit `git status --porcelain=v1 2>/dev/null | wc -l`)
  build-web:
    runs-on: ubuntu-20.04
    needs:
      - check-lints
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "lts/hydrogen"
          cache: yarn
      - name: Install Yarn dependencies
        run: yarn install --immutable
      - name: Build
        run: yarn run build -- --locked
      - name: Compress dist directory
        run: tar czvf web.tar.gz ./dist/*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: qcvis-web
          path: web.tar.gz
  build-tauri:
    strategy:
      matrix:
        os: ["ubuntu-20.04", "windows-2022", "macos-12"]
    runs-on: ${{ matrix.os }}
    needs:
      - check-lints
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "lts/hydrogen"
          cache: yarn
      - name: Install Yarn dependencies
        run: yarn install --immutable
      - name: Install apt Packages
        if: matrix.os == 'ubuntu-20.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libpython3-dev libdbus-1-dev libgtk-3-dev libsoup-gnome2.4-dev libwebkit2gtk-4.0-dev
          version: 1.0
      - name: Build Tauri
        run: yarn run build:tauri
      - name: Compress .app directory
        if: matrix.os == 'macos-12'
        run: tar czvf qcvis.app.tar.gz ./src-tauri/target/release/bundle/macos/qcvis.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: qcvis-tauri-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/appimage/qcvis*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/dmg/*.dmg
            qcvis.app.tar.gz
  release:
    runs-on: ubuntu-20.04
    needs:
      - build-web
      - build-tauri
    if: github.ref == 'refs/heads/trunk'
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: ls -R artifacts
      - name: Tag release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development build"
          files: |
            LICENSE.txt
            DEPENDENCIES.txt
            README.md
            artifacts/qcvis-*/**/*
